random_walk(g,s=None): Given a NetworkX graph g and starting node s, return a random walk that hits every node in the graph. The walk is returned as a list of tuples. When s is None (default), start from a random node in the graph.

path_from_walk(walk): Reduce a random_walk to a simple list of nodes in the random waldk. In other words, take the first element from each tuple plus the last element in the last tuple. See alsos walk_from_path.

walk_from_path(path): Expand a list of nodes into a list of tuples, such that every two successive items in the list form a tuple. See also path_from_walk.

observed_walk(walk): Given a random_walk, return a list of nodes in the walk in the order they were encountered without any duplicates. This represents the temporal order of first hits (i.e., observed participant data).

genX(g,s=None): Given a NetworkX graph g and starting node s, generate fake participant data (X) starting at node s. When s is None (default), start from a random node.

firstHit(walk): Given a random_walk, return a list of tuples where the first element of each tuple is a node and the second element is the position in the walk where that element was first hit.

genZfromX(x, theta): Given participant data x and parameter theta, return a possible random_walk Z that could have generated x.

computeCosts(As)
cost(graph,a)
drawG(g,save=False,display=True)
findBest():
flatten_list(l)
genG(n,k,p,tries=1000)
genGfromZ(walk)
genSample(num)
genz.genZfromXG(x,a)
genZfromXGold(x,a)
logprobZ(walk, a):
logprobG(graph, Xs):
rank(est_costs)
spearman(costs,est_costs)
trimX(prop,Xs,g,a,numnodes)
timer(times)
smallworld(a)
